// cl /experimental:module /EHsc /MD /std:c++latest /utf-8 opengl.core1_0.chain.ixx
export module opengl.core1_0.chain;
import std.core;
namespace opengl {
export {
    // gl types
    using GLbitfield = uint32_t;
    using GLboolean = bool; // maybe int or char?
    using GLbyte = int8_t; // check char
    using GLclampd = double;
    using GLclampf = float;
    using GLdouble = double;
    using GLenum = uint32_t;
    using GLfloat = float;
    using GLint = int32_t;
    using GLshort = int16_t;
    using GLsizei = int32_t;
    using GLubyte = uint8_t;
    using GLuint = uint32_t;
    using GLushort = uint16_t;

    // GLboolean constants
    constexpr GLboolean GL_FALSE    = 0;
    constexpr GLboolean GL_TRUE     = 1;

    // GLbitfields constants
    constexpr GLbitfield GL_ACCUM_BUFFER_BIT    = 0x00000200;
    constexpr GLbitfield GL_ALL_ATTRIB_BITS     = 0x000fffff;
    constexpr GLbitfield GL_COLOR_BUFFER_BIT    = 0x00004000;
    constexpr GLbitfield GL_CURRENT_BIT         = 0x00000001;
    constexpr GLbitfield GL_DEPTH_BUFFER_BIT    = 0x00000100;
    constexpr GLbitfield GL_ENABLE_BIT          = 0x00002000;
    constexpr GLbitfield GL_EVAL_BIT            = 0x00010000;
    constexpr GLbitfield GL_FOG_BIT             = 0x00000080;
    constexpr GLbitfield GL_HINT_BIT            = 0x00008000;
    constexpr GLbitfield GL_LIGHTING_BIT        = 0x00000040;
    constexpr GLbitfield GL_LINE_BIT            = 0x00000004;
    constexpr GLbitfield GL_LIST_BIT            = 0x00020000;
    constexpr GLbitfield GL_PIXEL_MODE_BIT      = 0x00000020;
    constexpr GLbitfield GL_POINT_BIT           = 0x00000002;
    constexpr GLbitfield GL_POLYGON_BIT         = 0x00000008;
    constexpr GLbitfield GL_POLYGON_STIPPLE_BIT = 0x00000010;
    constexpr GLbitfield GL_SCISSOR_BIT         = 0x00080000;
    constexpr GLbitfield GL_STENCIL_BUFFER_BIT  = 0x00000400;
    constexpr GLbitfield GL_TEXTURE_BIT         = 0x00040000;
    constexpr GLbitfield GL_TRANSFORM_BIT       = 0x00001000;
    constexpr GLbitfield GL_VIEWPORT_BIT        = 0x00000800;

    // GLenums constants
    constexpr GLenum GL_2D                          = 0x0600;
    constexpr GLenum GL_2_BYTES                     = 0x1407;
    constexpr GLenum GL_3D                          = 0x0601;
    constexpr GLenum GL_3_BYTES                     = 0x1408;
    constexpr GLenum GL_3D_COLOR                    = 0x0602;
    constexpr GLenum GL_3D_COLOR_TEXTURE            = 0x0603;
    constexpr GLenum GL_4D_COLOR_TEXTURE            = 0x0604;
    constexpr GLenum GL_4_BYTES                     = 0x1409;
    constexpr GLenum GL_ACCUM                       = 0x0100;
    constexpr GLenum GL_ADD                         = 0x0104;
    constexpr GLenum GL_ALPHA                       = 0x1906;
    constexpr GLenum GL_ALPHA_BIAS                  = 0x0D1D;
    constexpr GLenum GL_ALPHA_SCALE                 = 0x0D1C;
    constexpr GLenum GL_ALPHA_TEST                  = 0x0BC0;
    constexpr GLenum GL_ALWAYS                      = 0x0207;
    constexpr GLenum GL_AMBIENT_AND_DIFFUSE         = 0x1602;
    constexpr GLenum GL_AMBIENT                     = 0x1200;
    constexpr GLenum GL_AND                         = 0x1501;
    constexpr GLenum GL_AND_INVERTED                = 0x1504;
    constexpr GLenum GL_AND_REVERSE                 = 0x1502;
    constexpr GLenum GL_AUTO_NORMAL                 = 0x0D80;
    constexpr GLenum GL_AUX0                        = 0x0409;
    constexpr GLenum GL_AUX1                        = 0x040A;
    constexpr GLenum GL_AUX2                        = 0x040B;
    constexpr GLenum GL_AUX3                        = 0x040C;
    constexpr GLenum GL_BACK                        = 0x0405;
    constexpr GLenum GL_BACK_LEFT                   = 0x0402;
    constexpr GLenum GL_BACK_RIGHT                  = 0x0403;
    constexpr GLenum GL_BITMAP                      = 0x1A00;
    constexpr GLenum GL_BITMAP_TOKEN                = 0x0704;
    constexpr GLenum GL_BLEND                       = 0x0BE2;
    constexpr GLenum GL_BLUE                        = 0x1905;
    constexpr GLenum GL_BLUE_BIAS                   = 0x0D1B;
    constexpr GLenum GL_BLUE_SCALE                  = 0x0D1A;
    constexpr GLenum GL_BYTE                        = 0x1400;
    constexpr GLenum GL_CCW                         = 0x0901;
    constexpr GLenum GL_CLAMP                       = 0x2900;
    constexpr GLenum GL_CLEAR                       = 0x1500;
    constexpr GLenum GL_CLIP_PLANE0                 = 0x3000;
    constexpr GLenum GL_CLIP_PLANE1                 = 0x3001;
    constexpr GLenum GL_CLIP_PLANE2                 = 0x3002;
    constexpr GLenum GL_CLIP_PLANE3                 = 0x3003;
    constexpr GLenum GL_CLIP_PLANE4                 = 0x3004;
    constexpr GLenum GL_CLIP_PLANE5                 = 0x3005;
    constexpr GLenum GL_COEFF                       = 0x0A00;
    constexpr GLenum GL_COLOR                       = 0x1800;
    constexpr GLenum GL_COLOR_INDEX                 = 0x1900;
    constexpr GLenum GL_COLOR_INDEXES               = 0x1603;
    constexpr GLenum GL_COLOR_MATERIAL              = 0x0B57;
    constexpr GLenum GL_COMPILE                     = 0x1300;
    constexpr GLenum GL_COMPILE_AND_EXECUTE         = 0x1301;
    constexpr GLenum GL_CONSTANT_ATTENUATION        = 0x1207;
    constexpr GLenum GL_COPY                        = 0x1503;
    constexpr GLenum GL_COPY_INVERTED               = 0x150C;
    constexpr GLenum GL_COPY_PIXEL_TOKEN            = 0x0706;
    constexpr GLenum GL_CULL_FACE                   = 0x0B44;
    constexpr GLenum GL_CW                          = 0x0900;
    constexpr GLenum GL_DECAL                       = 0x2101;
    constexpr GLenum GL_DECR                        = 0x1E03;
    constexpr GLenum GL_DEPTH                       = 0x1801;
    constexpr GLenum GL_DEPTH_BIAS                  = 0x0D1F;
    constexpr GLenum GL_DEPTH_COMPONENT             = 0x1902;
    constexpr GLenum GL_DEPTH_SCALE                 = 0x0D1E;
    constexpr GLenum GL_DEPTH_TEST                  = 0x0B71;
    constexpr GLenum GL_DIFFUSE                     = 0x1201;
    constexpr GLenum GL_DITHER                      = 0x0BD0;
    constexpr GLenum GL_DOMAIN                      = 0x0A02;
    constexpr GLenum GL_DONT_CARE                   = 0x1100;
    constexpr GLenum GL_DRAW_PIXEL_TOKEN            = 0x0705;
    constexpr GLenum GL_DST_ALPHA                   = 0x0304;
    constexpr GLenum GL_DST_COLOR                   = 0x0306;
    constexpr GLenum GL_EMISSION                    = 0x1600;
    constexpr GLenum GL_EQUAL                       = 0x0202;
    constexpr GLenum GL_EQUIV                       = 0x1509;
    constexpr GLenum GL_EYE_LINEAR                  = 0x2400;
    constexpr GLenum GL_EYE_PLANE                   = 0x2502;
    constexpr GLenum GL_EXP                         = 0x0800;
    constexpr GLenum GL_EXP2                        = 0x0801;
    constexpr GLenum GL_EXTENSIONS                  = 0x1F03;
    constexpr GLenum GL_FASTEST                     = 0x1101;
    constexpr GLenum GL_FEEDBACK                    = 0x1C01;
    constexpr GLenum GL_FILL                        = 0x1B02;
    constexpr GLenum GL_FLAT                        = 0x1D00;
    constexpr GLenum GL_FLOAT                       = 0x1406;
    constexpr GLenum GL_FOG                         = 0x0B60;
    constexpr GLenum GL_FOG_COLOR                   = 0x0B66;
    constexpr GLenum GL_FOG_DENSITY                 = 0x0B62;
    constexpr GLenum GL_FOG_END                     = 0x0B64;
    constexpr GLenum GL_FOG_HINT                    = 0x0C54;
    constexpr GLenum GL_FOG_INDEX                   = 0x0B61;
    constexpr GLenum GL_FOG_MODE                    = 0x0B65;
    constexpr GLenum GL_FOG_START                   = 0x0B63;
    constexpr GLenum GL_FRONT                       = 0x0404;
    constexpr GLenum GL_FRONT_AND_BACK              = 0x0408;
    constexpr GLenum GL_FRONT_LEFT                  = 0x0400;
    constexpr GLenum GL_FRONT_RIGHT                 = 0x0401;
    constexpr GLenum GL_GEQUAL                      = 0x0206;
    constexpr GLenum GL_GREATER                     = 0x0204;
    constexpr GLenum GL_GREEN                       = 0x1904;
    constexpr GLenum GL_GREEN_BIAS                  = 0x0D19;
    constexpr GLenum GL_GREEN_SCALE                 = 0x0D18;
    constexpr GLenum GL_INCR                        = 0x1E02;
    constexpr GLenum GL_INDEX_SHIFT                 = 0x0D12;
    constexpr GLenum GL_INDEX_OFFSET                = 0x0D13;
    constexpr GLenum GL_INT                         = 0x1404;
    constexpr GLenum GL_INVALID_ENUM                = 0x0500;
    constexpr GLenum GL_INVALID_OPERATION           = 0x0502;
    constexpr GLenum GL_INVALID_VALUE               = 0x0501;
    constexpr GLenum GL_INVERT                      = 0x150A;
    constexpr GLenum GL_KEEP                        = 0x1E00;
    constexpr GLenum GL_LEFT                        = 0x0406;
    constexpr GLenum GL_LEQUAL                      = 0x0203;
    constexpr GLenum GL_LESS                        = 0x0201;
    constexpr GLenum GL_LIGHT0                      = 0x4000;
    constexpr GLenum GL_LIGHT1                      = 0x4001;
    constexpr GLenum GL_LIGHT2                      = 0x4002;
    constexpr GLenum GL_LIGHT3                      = 0x4003;
    constexpr GLenum GL_LIGHT4                      = 0x4004;
    constexpr GLenum GL_LIGHT5                      = 0x4005;
    constexpr GLenum GL_LIGHT6                      = 0x4006;
    constexpr GLenum GL_LIGHT7                      = 0x4007;
    constexpr GLenum GL_LIGHTING                    = 0x0B50;
    constexpr GLenum GL_LIGHT_MODEL_AMBIENT         = 0x0B53;
    constexpr GLenum GL_LIGHT_MODEL_LOCAL_VIEWER    = 0x0B51;
    constexpr GLenum GL_LIGHT_MODEL_TWO_SIDE        = 0x0B52;
    constexpr GLenum GL_LINEAR_ATTENUATION          = 0x1208;
    constexpr GLenum GL_LINE                        = 0x1B01;
    constexpr GLenum GL_LINEAR_MIPMAP_LINEAR        = 0x2703;
    constexpr GLenum GL_LINEAR_MIPMAP_NEAREST       = 0x2701;
    constexpr GLenum GL_LINEAR                      = 0x2601;
    constexpr GLenum GL_LINES                       = 0x0001;
    constexpr GLenum GL_LINE_LOOP                   = 0x0002;
    constexpr GLenum GL_LINE_RESET_TOKEN            = 0x0707;
    constexpr GLenum GL_LINE_SMOOTH                 = 0x0B20;
    constexpr GLenum GL_LINE_SMOOTH_HINT            = 0x0C52;
    constexpr GLenum GL_LINE_STIPPLE                = 0x0B24;
    constexpr GLenum GL_LINE_STRIP                  = 0x0003;
    constexpr GLenum GL_LINE_TOKEN                  = 0x0702;
    constexpr GLenum GL_LOAD                        = 0x0101;
    constexpr GLenum GL_LOGIC_OP                    = 0x0BF1;
    constexpr GLenum GL_LUMINANCE                   = 0x1909;
    constexpr GLenum GL_LUMINANCE_ALPHA             = 0x190A;
    constexpr GLenum GL_MAP1_COLOR_4                = 0x0D90;
    constexpr GLenum GL_MAP1_INDEX                  = 0x0D91;
    constexpr GLenum GL_MAP1_NORMAL                 = 0x0D92;
    constexpr GLenum GL_MAP1_TEXTURE_COORD_1        = 0x0D93;
    constexpr GLenum GL_MAP1_TEXTURE_COORD_2        = 0x0D94;
    constexpr GLenum GL_MAP1_TEXTURE_COORD_3        = 0x0D95;
    constexpr GLenum GL_MAP1_TEXTURE_COORD_4        = 0x0D96;
    constexpr GLenum GL_MAP1_VERTEX_3               = 0x0D97;
    constexpr GLenum GL_MAP1_VERTEX_4               = 0x0D98;
    constexpr GLenum GL_MAP2_COLOR_4                = 0x0DB0;
    constexpr GLenum GL_MAP2_INDEX                  = 0x0DB1;
    constexpr GLenum GL_MAP2_NORMAL                 = 0x0DB2;
    constexpr GLenum GL_MAP2_TEXTURE_COORD_1        = 0x0DB3;
    constexpr GLenum GL_MAP2_TEXTURE_COORD_2        = 0x0DB4;
    constexpr GLenum GL_MAP2_TEXTURE_COORD_3        = 0x0DB5;
    constexpr GLenum GL_MAP2_TEXTURE_COORD_4        = 0x0DB6;
    constexpr GLenum GL_MAP2_VERTEX_3               = 0x0DB7;
    constexpr GLenum GL_MAP2_VERTEX_4               = 0x0DB8;
    constexpr GLenum GL_MAP_COLOR                   = 0x0D10;
    constexpr GLenum GL_MAP_STENCIL                 = 0x0D11;
    constexpr GLenum GL_MAX_EVAL_ORDER              = 0x0D30;
    constexpr GLenum GL_MODELVIEW                   = 0x1700;
    constexpr GLenum GL_MODULATE                    = 0x2100;
    constexpr GLenum GL_MULT                        = 0x0103;
    constexpr GLenum GL_NAND                        = 0x150E;
    constexpr GLenum GL_NEAREST_MIPMAP_LINEAR       = 0x2702;
    constexpr GLenum GL_NEAREST_MIPMAP_NEAREST      = 0x2700;
    constexpr GLenum GL_NEAREST                     = 0x2600;
    constexpr GLenum GL_NEVER                       = 0x0200;
    constexpr GLenum GL_NICEST                      = 0x1102;
    constexpr GLenum GL_NONE                        = 0;
    constexpr GLenum GL_NOOP                        = 0x1505;
    constexpr GLenum GL_NOR                         = 0x1508;
    constexpr GLenum GL_NORMALIZE                   = 0x0BA1;
    constexpr GLenum GL_NOTEQUAL                    = 0x0205;
    constexpr GLenum GL_NO_ERROR                    = 0;
    constexpr GLenum GL_OBJECT_LINEAR               = 0x2401;
    constexpr GLenum GL_OBJECT_PLANE                = 0x2501;
    constexpr GLenum GL_ONE                         = 1;
    constexpr GLenum GL_ONE_MINUS_DST_ALPHA         = 0x0305;
    constexpr GLenum GL_ONE_MINUS_DST_COLOR         = 0x0307;
    constexpr GLenum GL_ONE_MINUS_SRC_ALPHA         = 0x0303;
    constexpr GLenum GL_ONE_MINUS_SRC_COLOR         = 0x0301;
    constexpr GLenum GL_OR                          = 0x1507;
    constexpr GLenum GL_ORDER                       = 0x0A01;
    constexpr GLenum GL_OR_INVERTED                 = 0x150D;
    constexpr GLenum GL_OR_REVERSE                  = 0x150B;
    constexpr GLenum GL_OUT_OF_MEMORY               = 0x0505;
    constexpr GLenum GL_PACK_ALIGNMENT              = 0x0D05;
    constexpr GLenum GL_PACK_ROW_LENGTH             = 0x0D02;
    constexpr GLenum GL_PACK_SKIP_PIXELS            = 0x0D04;
    constexpr GLenum GL_PACK_SKIP_ROWS              = 0x0D03;
    constexpr GLenum GL_PACK_SWAP_BYTES             = 0x0D00;
    constexpr GLenum GL_PASS_THROUGH_TOKEN          = 0x0700;
    constexpr GLenum GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
    constexpr GLenum GL_PIXEL_MAP_A_TO_A            = 0x0C79;
    constexpr GLenum GL_PIXEL_MAP_B_TO_B            = 0x0C78;
    constexpr GLenum GL_PIXEL_MAP_G_TO_G            = 0x0C77;
    constexpr GLenum GL_PIXEL_MAP_I_TO_A            = 0x0C75;
    constexpr GLenum GL_PIXEL_MAP_I_TO_B            = 0x0C74;
    constexpr GLenum GL_PIXEL_MAP_I_TO_G            = 0x0C73;
    constexpr GLenum GL_PIXEL_MAP_I_TO_I            = 0x0C70;
    constexpr GLenum GL_PIXEL_MAP_I_TO_R            = 0x0C72;
    constexpr GLenum GL_PIXEL_MAP_R_TO_R            = 0x0C76;
    constexpr GLenum GL_PIXEL_MAP_S_TO_S            = 0x0C71;
    constexpr GLenum GL_POINT                       = 0x1B00;
    constexpr GLenum GL_POINTS                      = 0x0000;
    constexpr GLenum GL_POINT_SMOOTH                = 0x0B10;
    constexpr GLenum GL_POINT_SMOOTH_HINT           = 0x0C51;
    constexpr GLenum GL_POINT_TOKEN                 = 0x0701;
    constexpr GLenum GL_POLYGON                     = 0x0009;
    constexpr GLenum GL_POLYGON_SMOOTH              = 0x0B41;
    constexpr GLenum GL_POLYGON_SMOOTH_HINT         = 0x0C53;
    constexpr GLenum GL_POLYGON_STIPPLE             = 0x0B42;
    constexpr GLenum GL_POLYGON_TOKEN               = 0x0703;
    constexpr GLenum GL_POSITION                    = 0x1203;
    constexpr GLenum GL_PROJECTION                  = 0x1701;
    constexpr GLenum GL_Q                           = 0x2003;
    constexpr GLenum GL_QUADRATIC_ATTENUATION       = 0x1209;
    constexpr GLenum GL_QUADS                       = 0x0007;
    constexpr GLenum GL_QUAD_STRIP                  = 0x0008;
    constexpr GLenum GL_R                           = 0x2002;
    constexpr GLenum GL_RENDER                      = 0x1C00;
    constexpr GLenum GL_REPEAT                      = 0x2901;
    constexpr GLenum GL_RED                         = 0x1903;
    constexpr GLenum GL_RED_BIAS                    = 0x0D15;
    constexpr GLenum GL_RED_SCALE                   = 0x0D14;
    constexpr GLenum GL_RENDERER                    = 0x1F01;
    constexpr GLenum GL_REPLACE                     = 0x1E01;
    constexpr GLenum GL_RETURN                      = 0x0102;
    constexpr GLenum GL_RGB                         = 0x1907;
    constexpr GLenum GL_RGBA                        = 0x1908;
    constexpr GLenum GL_RIGHT                       = 0x0407;
    constexpr GLenum GL_S                           = 0x2000;
    constexpr GLenum GL_SCISSOR_TEST                = 0x0C11;
    constexpr GLenum GL_SELECT                      = 0x1C02;
    constexpr GLenum GL_SET                         = 0x150F;
    constexpr GLenum GL_SHININESS                   = 0x1601;
    constexpr GLenum GL_SHORT                       = 0x1402;
    constexpr GLenum GL_SMOOTH                      = 0x1D01;
    constexpr GLenum GL_SPECULAR                    = 0x1202;
    constexpr GLenum GL_SPHERE_MAP                  = 0x2402;
    constexpr GLenum GL_SPOT_CUTOFF                 = 0x1206;
    constexpr GLenum GL_SPOT_DIRECTION              = 0x1204;
    constexpr GLenum GL_SPOT_EXPONENT               = 0x1205;
    constexpr GLenum GL_SRC_ALPHA                   = 0x0302;
    constexpr GLenum GL_SRC_ALPHA_SATURATE          = 0x0308;
    constexpr GLenum GL_SRC_COLOR                   = 0x0300;
    constexpr GLenum GL_STACK_OVERFLOW              = 0x0503;
    constexpr GLenum GL_STACK_UNDERFLOW             = 0x0504;
    constexpr GLenum GL_STENCIL                     = 0x1802;
    constexpr GLenum GL_STENCIL_INDEX               = 0x1901;
    constexpr GLenum GL_STENCIL_TEST                = 0x0B90;
    constexpr GLenum GL_T                           = 0x2001;
    constexpr GLenum GL_TEXTURE_ENV_COLOR           = 0x2201;
    constexpr GLenum GL_TEXTURE_ENV_MODE            = 0x2200;
    constexpr GLenum GL_TEXTURE_ENV                 = 0x2300;
    constexpr GLenum GL_TEXTURE                     = 0x1702;
    constexpr GLenum GL_TEXTURE_1D                  = 0x0DE0;
    constexpr GLenum GL_TEXTURE_2D                  = 0x0DE1;
    constexpr GLenum GL_TEXTURE_BORDER_COLOR        = 0x1004;
    constexpr GLenum GL_TEXTURE_GEN_MODE            = 0x2500;
    constexpr GLenum GL_TEXTURE_GEN_Q               = 0x0C63;
    constexpr GLenum GL_TEXTURE_GEN_R               = 0x0C62;
    constexpr GLenum GL_TEXTURE_GEN_S               = 0x0C60;
    constexpr GLenum GL_TEXTURE_GEN_T               = 0x0C61;
    constexpr GLenum GL_TEXTURE_MAG_FILTER          = 0x2800;
    constexpr GLenum GL_TEXTURE_MIN_FILTER          = 0x2801;
    constexpr GLenum GL_TEXTURE_WRAP_S              = 0x2802;
    constexpr GLenum GL_TEXTURE_WRAP_T              = 0x2803;
    constexpr GLenum GL_TRIANGLES                   = 0x0004;
    constexpr GLenum GL_TRIANGLE_FAN                = 0x0006;
    constexpr GLenum GL_TRIANGLE_STRIP              = 0x0005;
    constexpr GLenum GL_UNPACK_ALIGNMENT            = 0x0CF5;
    constexpr GLenum GL_UNPACK_LSB_FIRST            = 0x0CF1;
    constexpr GLenum GL_UNPACK_ROW_LENGTH           = 0x0CF2;
    constexpr GLenum GL_UNPACK_SKIP_PIXELS          = 0x0CF4;
    constexpr GLenum GL_UNPACK_SKIP_ROWS            = 0x0CF3;
    constexpr GLenum GL_UNPACK_SWAP_BYTES           = 0x0CF0;
    constexpr GLenum GL_UNSIGNED_BYTE               = 0x1401;
    constexpr GLenum GL_UNSIGNED_INT                = 0x1405;
    constexpr GLenum GL_UNSIGNED_SHORT              = 0x1403;
    constexpr GLenum GL_VENDOR                      = 0x1F00;
    constexpr GLenum GL_VERSION                     = 0x1F02;
    constexpr GLenum GL_XOR                         = 0x1506;
    constexpr GLenum GL_ZERO                        = 0;
}

namespace C {
extern "C" {
    void        glAccum(GLenum op, GLfloat value);
    void        glAlphaFunc(GLenum func, GLclampf ref);
    void        glBegin(GLenum mode);
    void        glBitmap(GLsizei w, GLsizei h, GLfloat xbo, GLfloat ybo, GLfloat xbi, GLfloat ybi, const GLubyte* data);
    void        glBlendFunc(GLenum src, GLenum dst);
    void        glCallList(GLuint n);
    void        glCallLists(GLuint n, GLenum type, const void* lists);
    void        glClear(GLbitfield buf);
    void        glClearAccum(GLfloat r, GLfloat g, GLfloat b, GLfloat a);
    void        glClearColor(GLclampf r, GLclampf g, GLclampf b, GLclampf a);
    void        glClearDepth(GLclampd d);
    void        glClearIndex(GLfloat index);
    void        glClearStencil(GLint s);
    void        glClipPlane(GLenum p, const GLdouble* eqn);
    void        glColorMask(GLboolean r, GLboolean g, GLboolean b, GLboolean a);
    void        glColorMaterial(GLenum face, GLenum mode);
    void        glColor3b(GLbyte r, GLbyte g, GLbyte b);
    void        glColor3bv(const GLbyte* v);
    void        glColor3d(GLdouble r, GLdouble g, GLdouble b);
    void        glColor3dv(const GLdouble* v);
    void        glColor3f(GLfloat r, GLfloat g, GLfloat b);
    void        glColor3fv(const GLfloat* v);
    void        glColor3i(GLint r, GLint g, GLint b);
    void        glColor3iv(const GLint* v);
    void        glColor3s(GLshort r, GLshort g, GLshort b);
    void        glColor3sv(const GLshort* v);
    void        glColor3ub(GLubyte r, GLbyte g, GLubyte b);
    void        glColor3ubv(const GLubyte* v);
    void        glColor3ui(GLuint r, GLuint g, GLuint b);
    void        glColor3uiv(const GLuint* v);
    void        glColor3us(GLushort r, GLushort g, GLushort b);
    void        glColor3usv(const GLushort* v);
    void        glColor4b(GLbyte r, GLbyte g, GLbyte b, GLbyte a);
    void        glColor4bv(const GLbyte* v);
    void        glColor4d(GLdouble r, GLdouble g, GLdouble b, GLdouble a);
    void        glColor4dv(const GLdouble* v);
    void        glColor4f(GLfloat r, GLfloat g, GLfloat b, GLfloat a);
    void        glColor4fv(const GLfloat* v);
    void        glColor4i(GLint r, GLint g, GLint b, GLint a);
    void        glColor4iv(const GLint* v);
    void        glColor4s(GLshort r, GLshort g, GLshort b, GLshort a);
    void        glColor4sv(const GLshort* v);
    void        glColor4ub(GLubyte r, GLbyte g, GLubyte b, GLubyte a);
    void        glColor4ubv(const GLubyte* v);
    void        glColor4ui(GLuint r, GLuint g, GLuint b, GLuint a);
    void        glColor4uiv(const GLuint* v);
    void        glColor4us(GLushort r, GLushort g, GLushort b, GLushort a);
    void        glColor4usv(const GLushort* v);
    void        glCopyPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
    void        glCullFace(GLenum mode);
    void        glDeleteLists(GLuint list, GLsizei range);
    void        glDepthFunc(GLenum func);
    void        glDepthMask(GLboolean mask);
    void        glDepthRange(GLclampd n, GLclampd f);
    void        glDisable(GLenum target);
    void        glDrawBuffer(GLenum buf);
    void        glDrawPixels(GLsizei width, GLsizei height, GLenum format, GLenum type, const void* data);
    void        glEdgeFlag(GLboolean flag);
    void        glEdgeFlagv(const GLboolean* flag);
    void        glEnable(GLenum target);
    void        glEnd();
    void        glEndList();
    void        glEvalCoord1d(GLdouble u);
    void        glEvalCoord1dv(const GLdouble* v);
    void        glEvalCoord1f(GLfloat u);
    void        glEvalCoord1fv(const GLfloat* v);
    void        glEvalCoord2d(GLdouble u, GLdouble v);
    void        glEvalCoord2dv(const GLdouble* v);
    void        glEvalCoord2f(GLfloat u, GLfloat v);
    void        glEvalCoord2fv(const GLfloat* v);
    void        glEvalMesh1(GLenum mode, GLint p1, GLint p2);
    void        glEvalMesh2(GLenum mode, GLint p1, GLint p2, GLint q1, GLint q2);
    void        glFeedbackBuffer(GLsizei n, GLenum type, GLfloat* buffer);
    void        glFlush();
    void        glFogf(GLenum pname, GLfloat param);
    void        glFogfv(GLenum pname, const GLfloat* params);
    void        glFogi(GLenum pname, GLint param);
    void        glFogiv(GLenum pname, const GLint* params);
    void        glFrontFace(GLenum dir);
    void        glFrustum(GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
    GLuint      glGenLists(GLsizei s);
    void        glGetBooleanv(GLenum value, GLboolean* data);
    void        glGetClipPlane(GLenum plane, GLfloat* eqn);
    void        glGetDoublev(GLenum value, GLdouble* data);
    GLenum      glGetError();
    void        glGetFloatv(GLenum value, GLfloat* data);
    void        glGetIntegerv(GLenum value, GLint* data);
    void        glGetLightfv(GLenum light, GLenum value, GLfloat* data);
    void        glGetLightiv(GLenum light, GLenum value, GLint* data);
    void        glGetMapdv(GLenum map, GLenum value, GLdouble* data);
    void        glGetMapfv(GLenum map, GLenum value, GLfloat* data);
    void        glGetMapiv(GLenum map, GLenum value, GLint* data);
    void        glGetMaterialfv(GLenum face, GLenum value, GLfloat* data);
    void        glGetMaterialiv(GLenum face, GLenum value, GLint* data);
    void        glGetPixelMapfv(GLenum map, GLfloat* data);
    void        glGetPixelMapuiv(GLenum map, GLuint* data);
    void        glGetPixelMapusv(GLenum map, GLushort* data);
    void        glGetPolygonStipple(void* pattern);
    GLubyte*    glGetString(GLenum name);
    void        glGetTexEnvfv(GLenum env, GLenum value, GLfloat* data);
    void        glGetTexEnviv(GLenum env, GLenum value, GLint* data);
    void        glGetTexGenfv(GLenum coord, GLenum value, GLfloat* data);
    void        glGetTexGeniv(GLenum coord, GLenum value, GLint* data);
    void        glGetTexImage(GLenum tex, GLint lod, GLenum format, GLenum type, void* img);
    void        glGetTexParameterfv(GLenum target, GLenum value, GLfloat* data);
    void        glGetTexParameteriv(GLenum target, GLenum value, GLint* data);
    void        glGetTexLevelParameterfv(GLenum target, GLint lod, GLenum value, GLfloat* data);
    void        glGetTexLevelParameteriv(GLenum target, GLint lod, GLenum value, GLint* data);
    void        glHint(GLenum target, GLenum hint);
    void        glIndexd(GLdouble index);
    void        glIndexdv(const GLdouble* index);
    void        glIndexf(GLfloat index);
    void        glIndexfv(const GLfloat* index);
    void        glIndexi(GLint index);
    void        glIndexiv(const GLint* index);
    void        glIndexs(GLshort index);
    void        glIndexsv(const GLshort* index);
    void        glIndexMask(GLuint mask);
    void        glInitNames();
    GLboolean   glIsEnabled(GLenum value);
    GLboolean   glIsList(GLuint list);
    void        glLightModelf(GLenum pname, GLfloat param);
    void        glLightModelfv(GLenum pname, const GLfloat* params);
    void        glLightModeli(GLenum pname, GLint param);
    void        glLightModeliv(GLenum pname, const GLint* params);
    void        glLightf(GLenum light, GLenum pname, GLfloat param);
    void        glLightfv(GLenum light, GLenum pname, const GLfloat* params);
    void        glLighti(GLenum light, GLenum pname, GLint param);
    void        glLightiv(GLenum light, GLenum pname, const GLint* params);
    void        glLineStipple(GLint factor, GLushort pattern);
    void        glLineWidth(GLfloat width);
    void        glListBase(GLuint base);
    void        glLoadIdentity();
    void        glLoadMatrixd(const GLdouble* m);
    void        glLoadMatrixf(const GLfloat* m);
    void        glLoadName(GLuint name);
    void        glLogicOp(GLenum op);
    void        glMap1d(GLenum type, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble* points);
    void        glMap1f(GLenum type, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat* points);
    void        glMap2d(GLenum type, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble* points);
    void        glMap2f(GLenum type, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat* points);
    void        glMapGrid1d(GLint n, GLdouble u1, GLdouble u2);
    void        glMapGrid1f(GLint n, GLfloat u1, GLfloat u2);
    void        glMapGrid2d(GLint nu, GLdouble u1, GLdouble u2, GLint nv, GLdouble v1, GLdouble v2);
    void        glMapGrid2f(GLint nu, GLfloat u1, GLfloat u2, GLint nv, GLfloat v1, GLfloat v2);
    void        glMaterialf(GLenum face, GLenum pname, GLfloat param);
    void        glMaterialfv(GLenum face, GLenum pname, const GLfloat* params);
    void        glMateriali(GLenum face, GLenum pname, GLint param);
    void        glMaterialiv(GLenum face, GLenum pname, const GLint* params);
    void        glMatrixMode(GLenum mode);
    void        glMultMatrixd(const GLdouble* m);
    void        glMultMatrixf(const GLfloat* m);
    void        glNewList(GLuint n, GLenum mode);
    void        glNormal3b(GLbyte x, GLbyte y, GLbyte z);
    void        glNormal3bv(const GLbyte* v);
    void        glNormal3d(GLdouble x, GLdouble y, GLdouble z);
    void        glNormal3dv(const GLdouble* v);
    void        glNormal3f(GLfloat x, GLfloat y, GLfloat z);
    void        glNormal3fv(const GLfloat* v);
    void        glNormal3i(GLint x, GLint y, GLint z);
    void        glNormal3iv(const GLint* v);
    void        glNormal3s(GLshort x, GLshort y, GLshort z);
    void        glNormal3sv(const GLshort* v);
    void        glOrtho(GLdouble l, GLdouble r, GLdouble b, GLdouble t, GLdouble n, GLdouble f);
    void        glPassThrough(GLfloat token);
    void        glPixelMapfv(GLenum map, GLsizei size, const GLfloat* values);
    void        glPixelMapuiv(GLenum map, GLsizei size, const GLuint* values);
    void        glPixelMapusv(GLenum map, GLsizei size, const GLushort* values);
    void        glPixelStoref(GLenum pname, GLfloat param);
    void        glPixelStorei(GLenum pname, GLint param);
    void        glPixelTransferf(GLenum param, GLfloat value);
    void        glPixelTransferi(GLenum param, GLint value);
    void        glPixelZoom(GLfloat zx, GLfloat zy);
    void        glPointSize(GLfloat size);
    void        glPolygonMode(GLenum face, GLenum mode);
    void        glPolygonStipple(const GLubyte* pattern);
    void        glPopAttrib();
    void        glPopMatrix();
    void        glPopName();
    void        glPushAttrib(GLbitfield mask);
    void        glPushMatrix();
    void        glPushName(GLuint name);
    void        glReadBuffer(GLenum src);
    void        glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* data);
    void        glRasterPos2d(GLdouble x, GLdouble y);
    void        glRasterPos2dv(const GLdouble* coords);
    void        glRasterPos2f(GLfloat x, GLfloat y);
    void        glRasterPos2fv(const GLfloat* coords);
    void        glRasterPos2i(GLint x, GLint y);
    void        glRasterPos2iv(const GLint* coords);
    void        glRasterPos2s(GLshort x, GLshort y);
    void        glRasterPos2sv(const GLshort* coords);
    void        glRasterPos3d(GLdouble x, GLdouble y, GLdouble z);
    void        glRasterPos3dv(const GLdouble* coords);
    void        glRasterPos3f(GLfloat x, GLfloat y, GLfloat z);
    void        glRasterPos3fv(const GLfloat* coords);
    void        glRasterPos3i(GLint x, GLint y, GLint z);
    void        glRasterPos3iv(const GLint* coords);
    void        glRasterPos3s(GLshort x, GLshort y, GLshort z);
    void        glRasterPos3sv(const GLshort* coords);
    void        glRasterPos4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void        glRasterPos4dv(const GLdouble* coords);
    void        glRasterPos4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void        glRasterPos4fv(const GLfloat* coords);
    void        glRasterPos4i(GLint x, GLint y, GLint z, GLint w);
    void        glRasterPos4iv(const GLint* coords);
    void        glRasterPos4s(GLshort x, GLshort y, GLshort z, GLshort w);
    void        glRasterPos4sv(const GLshort* coords);
    void        glRectd(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
    void        glRectdv(const GLdouble* v1, const GLdouble* v2);
    void        glRectf(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
    void        glRectfv(const GLfloat* v1, const GLfloat* v2);
    void        glRecti(GLint x1, GLint y1, GLint x2, GLint y2);
    void        glRectiv(const GLint* v1, const GLint* v2);
    void        glRects(GLshort x1, GLshort y1, GLshort x2, GLshort y2);
    void        glRectsv(const GLshort* v1, const GLshort* v2);
    void        glRenderMode(GLenum mode);
    void        glRotated(GLdouble degrees, GLdouble x, GLdouble y, GLdouble z);
    void        glRotatef(GLfloat degrees, GLfloat x, GLfloat y, GLfloat z);
    void        glScaled(GLdouble x, GLdouble y, GLdouble z);
    void        glScalef(GLfloat x, GLfloat y, GLfloat z);
    void        glScissor(GLint left, GLint bottom, GLsizei width, GLsizei height);
    void        glSelectBuffer(GLsizei n, GLuint* buffer);
    void        glShadeModel(GLenum mode);
    void        glStencilFunc(GLenum func, GLint ref, GLuint mask);
    void        glStencilMask(GLuint mask);
    void        glStencilOp(GLenum sfail, GLenum dpfail, GLenum dppass);
    void        glTexCoord1d(GLdouble s);
    void        glTexCoord1dv(const GLdouble* v);
    void        glTexCoord1f(GLfloat s);
    void        glTexCoord1fv(const GLfloat* v);
    void        glTexCoord1i(GLint s);
    void        glTexCoord1iv(const GLint* v);
    void        glTexCoord1s(GLshort s);
    void        glTexCoord1sv(const GLshort* v);
    void        glTexCoord2d(GLdouble s, GLdouble t);
    void        glTexCoord2dv(const GLdouble* v);
    void        glTexCoord2f(GLfloat s, GLfloat t);
    void        glTexCoord2fv(const GLfloat* v);
    void        glTexCoord2i(GLint s, GLint t);
    void        glTexCoord2iv(const GLint* v);
    void        glTexCoord2s(GLshort s, GLshort t);
    void        glTexCoord2sv(const GLshort* v);
    void        glTexCoord3d(GLdouble s, GLdouble t, GLdouble r);
    void        glTexCoord3dv(const GLdouble* v);
    void        glTexCoord3f(GLfloat s, GLfloat t, GLfloat r);
    void        glTexCoord3fv(const GLfloat* v);
    void        glTexCoord3i(GLint s, GLint t, GLint r);
    void        glTexCoord3iv(const GLint* v);
    void        glTexCoord3s(GLshort s, GLshort t, GLshort r);
    void        glTexCoord3sv(const GLshort* v);
    void        glTexCoord4d(GLdouble s, GLdouble t, GLdouble r, GLdouble q);
    void        glTexCoord4dv(const GLdouble* v);
    void        glTexCoord4f(GLfloat s, GLfloat t, GLfloat r, GLfloat q);
    void        glTexCoord4fv(const GLfloat* v);
    void        glTexCoord4i(GLint s, GLint t, GLint r, GLint q);
    void        glTexCoord4iv(const GLint* v);
    void        glTexCoord4s(GLshort s, GLshort t, GLshort r, GLshort q);
    void        glTexCoord4sv(const GLshort* v);
    void        glTexEnvf(GLenum target, GLenum pname, GLfloat param);
    void        glTexEnvfv(GLenum target, GLenum pname, const GLfloat* params);
    void        glTexEnvi(GLenum target, GLenum pname, GLint param);
    void        glTexEnviv(GLenum target, GLenum pname, const GLint* params);
    void        glTexGend(GLenum coord, GLenum pname, GLdouble param);
    void        glTexGendv(GLenum coord, GLenum pname, const GLdouble* params);
    void        glTexGenf(GLenum coord, GLenum pname, GLfloat param);
    void        glTexGenfv(GLenum coord, GLenum pname, const GLfloat* params);
    void        glTexGeni(GLenum coord, GLenum pname, GLint param);
    void        glTexGeniv(GLenum coord, GLenum pname, const GLint* params);
    void        glTexImage1D(GLenum target, GLint level, GLint components, GLsizei width, GLint border, GLenum format, GLenum type, const void* data);
    void        glTexImage2D(GLenum target, GLint level, GLint components, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* data);
    void        glTexParameterf(GLenum target, GLenum pname, GLfloat param);
    void        glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params);
    void        glTexParameteri(GLenum target, GLenum pname, GLint param);
    void        glTexParameteriv(GLenum target, GLenum pname, const GLint* params);
    void        glTranslated(GLdouble x, GLdouble y, GLdouble z);
    void        glTranslatef(GLfloat x, GLfloat y, GLfloat z);
    void        glVertex2d(GLdouble x, GLdouble y);
    void        glVertex2dv(const GLdouble* v);
    void        glVertex2f(GLfloat x, GLfloat y);
    void        glVertex2fv(const GLfloat* v);
    void        glVertex2i(GLint x, GLint y);
    void        glVertex2iv(const GLint* v);
    void        glVertex2s(GLshort x, GLshort y);
    void        glVertex2sv(const GLshort* v);
    void        glVertex3d(GLdouble x, GLdouble y, GLdouble z);
    void        glVertex3dv(const GLdouble* v);
    void        glVertex3f(GLfloat x, GLfloat y, GLfloat z);
    void        glVertex3fv(const GLfloat* v);
    void        glVertex3i(GLint x, GLint y, GLint z);
    void        glVertex3iv(const GLint* v);
    void        glVertex3s(GLshort x, GLshort y, GLshort z);
    void        glVertex3sv(const GLshort* v);
    void        glVertex4d(GLdouble x, GLdouble y, GLdouble z, GLdouble w);
    void        glVertex4dv(const GLdouble* v);
    void        glVertex4f(GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void        glVertex4fv(const GLfloat* v);
    void        glVertex4i(GLint x, GLint y, GLint z, GLint w);
    void        glVertex4iv(const GLint* v);
    void        glVertex4s(GLshort x, GLshort y, GLshort z, GLshort w);
    void        glVertex4sv(const GLshort* v);
    void        glViewport(GLint x, GLint y, GLsizei w, GLsizei h);
}}

export {
    auto glAccum = C::glAccum;
    auto glAlphaFunc = C::glAlphaFunc;
    auto glBegin = C::glBegin;
    auto glBitmap = C::glBitmap;
    auto glBlendFunc = C::glBlendFunc;
    auto glCallList = C::glCallList;
    auto glCallLists = C::glCallLists;
    auto glClear = C::glClear;
    auto glClearAccum = C::glClearAccum;
    auto glClearColor = C::glClearColor;
    auto glClearDepth = C::glClearDepth;
    auto glClearIndex = C::glClearIndex;
    auto glClearStencil = C::glClearStencil;
    auto glClipPlane = C::glClipPlane;
    auto glColorMask = C::glColorMask;
    auto glColorMaterial = C::glColorMaterial;
    auto glColor3b = C::glColor3b;
    auto glColor3bv = C::glColor3bv;
    auto glColor3d = C::glColor3d;
    auto glColor3dv = C::glColor3dv;
    auto glColor3f = C::glColor3f;
    auto glColor3fv = C::glColor3fv;
    auto glColor3i = C::glColor3i;
    auto glColor3iv = C::glColor3iv;
    auto glColor3s = C::glColor3s;
    auto glColor3sv = C::glColor3sv;
    auto glColor3ub = C::glColor3ub;
    auto glColor3ubv = C::glColor3ubv;
    auto glColor3ui = C::glColor3ui;
    auto glColor3uiv = C::glColor3uiv;
    auto glColor3us = C::glColor3us;
    auto glColor3usv = C::glColor3usv;
    auto glColor4b = C::glColor4b;
    auto glColor4bv = C::glColor4bv;
    auto glColor4d = C::glColor4d;
    auto glColor4dv = C::glColor4dv;
    auto glColor4f = C::glColor4f;
    auto glColor4fv = C::glColor4fv;
    auto glColor4i = C::glColor4i;
    auto glColor4iv = C::glColor4iv;
    auto glColor4s = C::glColor4s;
    auto glColor4sv = C::glColor4sv;
    auto glColor4ub = C::glColor4ub;
    auto glColor4ubv = C::glColor4ubv;
    auto glColor4ui = C::glColor4ui;
    auto glColor4uiv = C::glColor4uiv;
    auto glColor4us = C::glColor4us;
    auto glColor4usv = C::glColor4usv;
    auto glCopyPixels = C::glCopyPixels;
    auto glCullFace = C::glCullFace;
    auto glDeleteLists = C::glDeleteLists;
    auto glDepthFunc = C::glDepthFunc;
    auto glDepthMask = C::glDepthMask;
    auto glDepthRange = C::glDepthRange;
    auto glDisable = C::glDisable;
    auto glDrawBuffer = C::glDrawBuffer;
    auto glDrawPixels = C::glDrawPixels;
    auto glEdgeFlag = C::glEdgeFlag;
    auto glEdgeFlagv = C::glEdgeFlagv;
    auto glEnable = C::glEnable;
    auto glEnd = C::glEnd;
    auto glEndList = C::glEndList;
    auto glEvalCoord1d = C::glEvalCoord1d;
    auto glEvalCoord1dv = C::glEvalCoord1dv;
    auto glEvalCoord1f = C::glEvalCoord1f;
    auto glEvalCoord1fv = C::glEvalCoord1fv;
    auto glEvalCoord2d = C::glEvalCoord2d;
    auto glEvalCoord2dv = C::glEvalCoord2dv;
    auto glEvalCoord2f = C::glEvalCoord2f;
    auto glEvalCoord2fv = C::glEvalCoord2fv;
    auto glEvalMesh1 = C::glEvalMesh1;
    auto glEvalMesh2 = C::glEvalMesh2;
    auto glFeedbackBuffer = C::glFeedbackBuffer;
    auto glFlush = C::glFlush;
    auto glFogf = C::glFogf;
    auto glFogfv = C::glFogfv;
    auto glFogi = C::glFogi;
    auto glFogiv = C::glFogiv;
    auto glFrontFace = C::glFrontFace;
    auto glFrustum = C::glFrustum;
    auto glGenLists = C::glGenLists;
    auto glGetBooleanv = C::glGetBooleanv;
    auto glGetClipPlane = C::glGetClipPlane;
    auto glGetDoublev = C::glGetDoublev;
    auto glGetError = C::glGetError;
    auto glGetFloatv = C::glGetFloatv;
    auto glGetIntegerv = C::glGetIntegerv;
    auto glGetLightfv = C::glGetLightfv;
    auto glGetLightiv = C::glGetLightiv;
    auto glGetMapdv = C::glGetMapdv;
    auto glGetMapfv = C::glGetMapfv;
    auto glGetMapiv = C::glGetMapiv;
    auto glGetMaterialfv = C::glGetMaterialfv;
    auto glGetMaterialiv = C::glGetMaterialiv;
    auto glGetPixelMapfv = C::glGetPixelMapfv;
    auto glGetPixelMapuiv = C::glGetPixelMapuiv;
    auto glGetPixelMapusv = C::glGetPixelMapusv;
    auto glGetPolygonStipple = C::glGetPolygonStipple;
    auto glGetString = C::glGetString;
    auto glGetTexEnvfv = C::glGetTexEnvfv;
    auto glGetTexEnviv = C::glGetTexEnviv;
    auto glGetTexGenfv = C::glGetTexGenfv;
    auto glGetTexGeniv = C::glGetTexGeniv;
    auto glGetTexImage = C::glGetTexImage;
    auto glGetTexParameterfv = C::glGetTexParameterfv;
    auto glGetTexParameteriv = C::glGetTexParameteriv;
    auto glGetTexLevelParameterfv = C::glGetTexLevelParameterfv;
    auto glGetTexLevelParameteriv = C::glGetTexLevelParameteriv;
    auto glHint = C::glHint;
    auto glIndexd = C::glIndexd;
    auto glIndexdv = C::glIndexdv;
    auto glIndexf = C::glIndexf;
    auto glIndexfv = C::glIndexfv;
    auto glIndexi = C::glIndexi;
    auto glIndexiv = C::glIndexiv;
    auto glIndexs = C::glIndexs;
    auto glIndexsv = C::glIndexsv;
    auto glIndexMask = C::glIndexMask;
    auto glInitNames = C::glInitNames;
    auto glIsEnabled = C::glIsEnabled;
    auto glIsList = C::glIsList;
    auto glLightModelf = C::glLightModelf;
    auto glLightModelfv = C::glLightModelfv;
    auto glLightModeli = C::glLightModeli;
    auto glLightModeliv = C::glLightModeliv;
    auto glLightf = C::glLightf;
    auto glLightfv = C::glLightfv;
    auto glLighti = C::glLighti;
    auto glLightiv = C::glLightiv;
    auto glLineStipple = C::glLineStipple;
    auto glLineWidth = C::glLineWidth;
    auto glListBase = C::glListBase;
    auto glLoadIdentity = C::glLoadIdentity;
    auto glLoadMatrixd = C::glLoadMatrixd;
    auto glLoadMatrixf = C::glLoadMatrixf;
    auto glLoadName = C::glLoadName;
    auto glLogicOp = C::glLogicOp;
    auto glMap1d = C::glMap1d;
    auto glMap1f = C::glMap1f;
    auto glMap2d = C::glMap2d;
    auto glMap2f = C::glMap2f;
    auto glMapGrid1d = C::glMapGrid1d;
    auto glMapGrid1f = C::glMapGrid1f;
    auto glMapGrid2d = C::glMapGrid2d;
    auto glMapGrid2f = C::glMapGrid2f;
    auto glMaterialf = C::glMaterialf;
    auto glMaterialfv = C::glMaterialfv;
    auto glMateriali = C::glMateriali;
    auto glMaterialiv = C::glMaterialiv;
    auto glMatrixMode = C::glMatrixMode;
    auto glMultMatrixd = C::glMultMatrixd;
    auto glMultMatrixf = C::glMultMatrixf;
    auto glNewList = C::glNewList;
    auto glNormal3b = C::glNormal3b;
    auto glNormal3bv = C::glNormal3bv;
    auto glNormal3d = C::glNormal3d;
    auto glNormal3dv = C::glNormal3dv;
    auto glNormal3f = C::glNormal3f;
    auto glNormal3fv = C::glNormal3fv;
    auto glNormal3i = C::glNormal3i;
    auto glNormal3iv = C::glNormal3iv;
    auto glNormal3s = C::glNormal3s;
    auto glNormal3sv = C::glNormal3sv;
    auto glOrtho = C::glOrtho;
    auto glPassThrough = C::glPassThrough;
    auto glPixelMapfv = C::glPixelMapfv;
    auto glPixelMapuiv = C::glPixelMapuiv;
    auto glPixelMapusv = C::glPixelMapusv;
    auto glPixelStoref = C::glPixelStoref;
    auto glPixelStorei = C::glPixelStorei;
    auto glPixelTransferf = C::glPixelTransferf;
    auto glPixelTransferi = C::glPixelTransferi;
    auto glPixelZoom = C::glPixelZoom;
    auto glPointSize = C::glPointSize;
    auto glPolygonMode = C::glPolygonMode;
    auto glPolygonStipple = C::glPolygonStipple;
    auto glPopAttrib = C::glPopAttrib;
    auto glPopMatrix = C::glPopMatrix;
    auto glPopName = C::glPopName;
    auto glPushAttrib = C::glPushAttrib;
    auto glPushMatrix = C::glPushMatrix;
    auto glPushName = C::glPushName;
    auto glReadBuffer = C::glReadBuffer;
    auto glReadPixels = C::glReadPixels;
    auto glRasterPos2d = C::glRasterPos2d;
    auto glRasterPos2dv = C::glRasterPos2dv;
    auto glRasterPos2f = C::glRasterPos2f;
    auto glRasterPos2fv = C::glRasterPos2fv;
    auto glRasterPos2i = C::glRasterPos2i;
    auto glRasterPos2iv = C::glRasterPos2iv;
    auto glRasterPos2s = C::glRasterPos2s;
    auto glRasterPos2sv = C::glRasterPos2sv;
    auto glRasterPos3d = C::glRasterPos3d;
    auto glRasterPos3dv = C::glRasterPos3dv;
    auto glRasterPos3f = C::glRasterPos3f;
    auto glRasterPos3fv = C::glRasterPos3fv;
    auto glRasterPos3i = C::glRasterPos3i;
    auto glRasterPos3iv = C::glRasterPos3iv;
    auto glRasterPos3s = C::glRasterPos3s;
    auto glRasterPos3sv = C::glRasterPos3sv;
    auto glRasterPos4d = C::glRasterPos4d;
    auto glRasterPos4dv = C::glRasterPos4dv;
    auto glRasterPos4f = C::glRasterPos4f;
    auto glRasterPos4fv = C::glRasterPos4fv;
    auto glRasterPos4i = C::glRasterPos4i;
    auto glRasterPos4iv = C::glRasterPos4iv;
    auto glRasterPos4s = C::glRasterPos4s;
    auto glRasterPos4sv = C::glRasterPos4sv;
    auto glRectd = C::glRectd;
    auto glRectdv = C::glRectdv;
    auto glRectf = C::glRectf;
    auto glRectfv = C::glRectfv;
    auto glRecti = C::glRecti;
    auto glRectiv = C::glRectiv;
    auto glRects = C::glRects;
    auto glRectsv = C::glRectsv;
    auto glRenderMode = C::glRenderMode;
    auto glRotated = C::glRotated;
    auto glRotatef = C::glRotatef;
    auto glScaled = C::glScaled;
    auto glScalef = C::glScalef;
    auto glScissor = C::glScissor;
    auto glSelectBuffer = C::glSelectBuffer;
    auto glShadeModel = C::glShadeModel;
    auto glStencilFunc = C::glStencilFunc;
    auto glStencilMask = C::glStencilMask;
    auto glStencilOp = C::glStencilOp;
    auto glTexCoord1d = C::glTexCoord1d;
    auto glTexCoord1dv = C::glTexCoord1dv;
    auto glTexCoord1f = C::glTexCoord1f;
    auto glTexCoord1fv = C::glTexCoord1fv;
    auto glTexCoord1i = C::glTexCoord1i;
    auto glTexCoord1iv = C::glTexCoord1iv;
    auto glTexCoord1s = C::glTexCoord1s;
    auto glTexCoord1sv = C::glTexCoord1sv;
    auto glTexCoord2d = C::glTexCoord2d;
    auto glTexCoord2dv = C::glTexCoord2dv;
    auto glTexCoord2f = C::glTexCoord2f;
    auto glTexCoord2fv = C::glTexCoord2fv;
    auto glTexCoord2i = C::glTexCoord2i;
    auto glTexCoord2iv = C::glTexCoord2iv;
    auto glTexCoord2s = C::glTexCoord2s;
    auto glTexCoord2sv = C::glTexCoord2sv;
    auto glTexCoord3d = C::glTexCoord3d;
    auto glTexCoord3dv = C::glTexCoord3dv;
    auto glTexCoord3f = C::glTexCoord3f;
    auto glTexCoord3fv = C::glTexCoord3fv;
    auto glTexCoord3i = C::glTexCoord3i;
    auto glTexCoord3iv = C::glTexCoord3iv;
    auto glTexCoord3s = C::glTexCoord3s;
    auto glTexCoord3sv = C::glTexCoord3sv;
    auto glTexCoord4d = C::glTexCoord4d;
    auto glTexCoord4dv = C::glTexCoord4dv;
    auto glTexCoord4f = C::glTexCoord4f;
    auto glTexCoord4fv = C::glTexCoord4fv;
    auto glTexCoord4i = C::glTexCoord4i;
    auto glTexCoord4iv = C::glTexCoord4iv;
    auto glTexCoord4s = C::glTexCoord4s;
    auto glTexCoord4sv = C::glTexCoord4sv;
    auto glTexEnvf = C::glTexEnvf;
    auto glTexEnvfv = C::glTexEnvfv;
    auto glTexEnvi = C::glTexEnvi;
    auto glTexEnviv = C::glTexEnviv;
    auto glTexGend = C::glTexGend;
    auto glTexGendv = C::glTexGendv;
    auto glTexGenf = C::glTexGenf;
    auto glTexGenfv = C::glTexGenfv;
    auto glTexGeni = C::glTexGeni;
    auto glTexGeniv = C::glTexGeniv;
    auto glTexImage1D = C::glTexImage1D;
    auto glTexImage2D = C::glTexImage2D;
    auto glTexParameterf = C::glTexParameterf;
    auto glTexParameterfv = C::glTexParameterfv;
    auto glTexParameteri = C::glTexParameteri;
    auto glTexParameteriv = C::glTexParameteriv;
    auto glTranslated = C::glTranslated;
    auto glTranslatef = C::glTranslatef;
    auto glVertex2d = C::glVertex2d;
    auto glVertex2dv = C::glVertex2dv;
    auto glVertex2f = C::glVertex2f;
    auto glVertex2fv = C::glVertex2fv;
    auto glVertex2i = C::glVertex2i;
    auto glVertex2iv = C::glVertex2iv;
    auto glVertex2s = C::glVertex2s;
    auto glVertex2sv = C::glVertex2sv;
    auto glVertex3d = C::glVertex3d;
    auto glVertex3dv = C::glVertex3dv;
    auto glVertex3f = C::glVertex3f;
    auto glVertex3fv = C::glVertex3fv;
    auto glVertex3i = C::glVertex3i;
    auto glVertex3iv = C::glVertex3iv;
    auto glVertex3s = C::glVertex3s;
    auto glVertex3sv = C::glVertex3sv;
    auto glVertex4d = C::glVertex4d;
    auto glVertex4dv = C::glVertex4dv;
    auto glVertex4f = C::glVertex4f;
    auto glVertex4fv = C::glVertex4fv;
    auto glVertex4i = C::glVertex4i;
    auto glVertex4iv = C::glVertex4iv;
    auto glVertex4s = C::glVertex4s;
    auto glVertex4sv = C::glVertex4sv;
    auto glViewport = C::glViewport;
}}
